#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Yetkilendirme12M
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BIRIKIM")]
	public partial class UserRoleDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserPerm(UserPerm instance);
    partial void UpdateUserPerm(UserPerm instance);
    partial void DeleteUserPerm(UserPerm instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRolePerm(RolePerm instance);
    partial void UpdateRolePerm(RolePerm instance);
    partial void DeleteRolePerm(RolePerm instance);
    partial void InsertPerm(Perm instance);
    partial void UpdatePerm(Perm instance);
    partial void DeletePerm(Perm instance);
    #endregion
		
		public UserRoleDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserRoleDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserRoleDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserRoleDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserPerm> UserPerms
		{
			get
			{
				return this.GetTable<UserPerm>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<RolePerm> RolePerms
		{
			get
			{
				return this.GetTable<RolePerm>();
			}
		}
		
		public System.Data.Linq.Table<Perm> Perms
		{
			get
			{
				return this.GetTable<Perm>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="usr.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Sirket;
		
		private short _Tip;
		
		private string _Kod;
		
		private string _Sifre;
		
		private string _AdSoyad;
		
		private string _Email;
		
		private string _RoleName;
		
		private string _Tema;
		
		private bool _Admin;
		
		private bool _Aktif;
		
		private string _Kaydeden;
		
		private int _KayitTarih;
		
		private int _KayitSaat;
		
		private short _KayitKaynak;
		
		private string _KayitSurum;
		
		private string _Degistiren;
		
		private int _DegisTarih;
		
		private int _DegisSaat;
		
		private short _DegisKaynak;
		
		private string _DegisSurum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSirketChanging(string value);
    partial void OnSirketChanged();
    partial void OnTipChanging(short value);
    partial void OnTipChanged();
    partial void OnKodChanging(string value);
    partial void OnKodChanged();
    partial void OnSifreChanging(string value);
    partial void OnSifreChanged();
    partial void OnAdSoyadChanging(string value);
    partial void OnAdSoyadChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnTemaChanging(string value);
    partial void OnTemaChanged();
    partial void OnAdminChanging(bool value);
    partial void OnAdminChanged();
    partial void OnAktifChanging(bool value);
    partial void OnAktifChanged();
    partial void OnKaydedenChanging(string value);
    partial void OnKaydedenChanged();
    partial void OnKayitTarihChanging(int value);
    partial void OnKayitTarihChanged();
    partial void OnKayitSaatChanging(int value);
    partial void OnKayitSaatChanged();
    partial void OnKayitKaynakChanging(short value);
    partial void OnKayitKaynakChanged();
    partial void OnKayitSurumChanging(string value);
    partial void OnKayitSurumChanged();
    partial void OnDegistirenChanging(string value);
    partial void OnDegistirenChanged();
    partial void OnDegisTarihChanging(int value);
    partial void OnDegisTarihChanged();
    partial void OnDegisSaatChanging(int value);
    partial void OnDegisSaatChanged();
    partial void OnDegisKaynakChanging(short value);
    partial void OnDegisKaynakChanged();
    partial void OnDegisSurumChanging(string value);
    partial void OnDegisSurumChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sirket", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Sirket
		{
			get
			{
				return this._Sirket;
			}
			set
			{
				if ((this._Sirket != value))
				{
					this.OnSirketChanging(value);
					this.SendPropertyChanging();
					this._Sirket = value;
					this.SendPropertyChanged("Sirket");
					this.OnSirketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tip", DbType="SmallInt NOT NULL")]
		public short Tip
		{
			get
			{
				return this._Tip;
			}
			set
			{
				if ((this._Tip != value))
				{
					this.OnTipChanging(value);
					this.SendPropertyChanging();
					this._Tip = value;
					this.SendPropertyChanged("Tip");
					this.OnTipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kod", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Kod
		{
			get
			{
				return this._Kod;
			}
			set
			{
				if ((this._Kod != value))
				{
					this.OnKodChanging(value);
					this.SendPropertyChanging();
					this._Kod = value;
					this.SendPropertyChanged("Kod");
					this.OnKodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sifre", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Sifre
		{
			get
			{
				return this._Sifre;
			}
			set
			{
				if ((this._Sifre != value))
				{
					this.OnSifreChanging(value);
					this.SendPropertyChanging();
					this._Sifre = value;
					this.SendPropertyChanged("Sifre");
					this.OnSifreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdSoyad", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AdSoyad
		{
			get
			{
				return this._AdSoyad;
			}
			set
			{
				if ((this._AdSoyad != value))
				{
					this.OnAdSoyadChanging(value);
					this.SendPropertyChanging();
					this._AdSoyad = value;
					this.SendPropertyChanged("AdSoyad");
					this.OnAdSoyadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tema", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Tema
		{
			get
			{
				return this._Tema;
			}
			set
			{
				if ((this._Tema != value))
				{
					this.OnTemaChanging(value);
					this.SendPropertyChanging();
					this._Tema = value;
					this.SendPropertyChanged("Tema");
					this.OnTemaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin", DbType="Bit NOT NULL")]
		public bool Admin
		{
			get
			{
				return this._Admin;
			}
			set
			{
				if ((this._Admin != value))
				{
					this.OnAdminChanging(value);
					this.SendPropertyChanging();
					this._Admin = value;
					this.SendPropertyChanged("Admin");
					this.OnAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Aktif", DbType="Bit NOT NULL")]
		public bool Aktif
		{
			get
			{
				return this._Aktif;
			}
			set
			{
				if ((this._Aktif != value))
				{
					this.OnAktifChanging(value);
					this.SendPropertyChanging();
					this._Aktif = value;
					this.SendPropertyChanged("Aktif");
					this.OnAktifChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kaydeden", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Kaydeden
		{
			get
			{
				return this._Kaydeden;
			}
			set
			{
				if ((this._Kaydeden != value))
				{
					this.OnKaydedenChanging(value);
					this.SendPropertyChanging();
					this._Kaydeden = value;
					this.SendPropertyChanged("Kaydeden");
					this.OnKaydedenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KayitTarih", DbType="Int NOT NULL")]
		public int KayitTarih
		{
			get
			{
				return this._KayitTarih;
			}
			set
			{
				if ((this._KayitTarih != value))
				{
					this.OnKayitTarihChanging(value);
					this.SendPropertyChanging();
					this._KayitTarih = value;
					this.SendPropertyChanged("KayitTarih");
					this.OnKayitTarihChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KayitSaat", DbType="Int NOT NULL")]
		public int KayitSaat
		{
			get
			{
				return this._KayitSaat;
			}
			set
			{
				if ((this._KayitSaat != value))
				{
					this.OnKayitSaatChanging(value);
					this.SendPropertyChanging();
					this._KayitSaat = value;
					this.SendPropertyChanged("KayitSaat");
					this.OnKayitSaatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KayitKaynak", DbType="SmallInt NOT NULL")]
		public short KayitKaynak
		{
			get
			{
				return this._KayitKaynak;
			}
			set
			{
				if ((this._KayitKaynak != value))
				{
					this.OnKayitKaynakChanging(value);
					this.SendPropertyChanging();
					this._KayitKaynak = value;
					this.SendPropertyChanged("KayitKaynak");
					this.OnKayitKaynakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KayitSurum", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string KayitSurum
		{
			get
			{
				return this._KayitSurum;
			}
			set
			{
				if ((this._KayitSurum != value))
				{
					this.OnKayitSurumChanging(value);
					this.SendPropertyChanging();
					this._KayitSurum = value;
					this.SendPropertyChanged("KayitSurum");
					this.OnKayitSurumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Degistiren", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Degistiren
		{
			get
			{
				return this._Degistiren;
			}
			set
			{
				if ((this._Degistiren != value))
				{
					this.OnDegistirenChanging(value);
					this.SendPropertyChanging();
					this._Degistiren = value;
					this.SendPropertyChanged("Degistiren");
					this.OnDegistirenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DegisTarih", DbType="Int NOT NULL")]
		public int DegisTarih
		{
			get
			{
				return this._DegisTarih;
			}
			set
			{
				if ((this._DegisTarih != value))
				{
					this.OnDegisTarihChanging(value);
					this.SendPropertyChanging();
					this._DegisTarih = value;
					this.SendPropertyChanged("DegisTarih");
					this.OnDegisTarihChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DegisSaat", DbType="Int NOT NULL")]
		public int DegisSaat
		{
			get
			{
				return this._DegisSaat;
			}
			set
			{
				if ((this._DegisSaat != value))
				{
					this.OnDegisSaatChanging(value);
					this.SendPropertyChanging();
					this._DegisSaat = value;
					this.SendPropertyChanged("DegisSaat");
					this.OnDegisSaatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DegisKaynak", DbType="SmallInt NOT NULL")]
		public short DegisKaynak
		{
			get
			{
				return this._DegisKaynak;
			}
			set
			{
				if ((this._DegisKaynak != value))
				{
					this.OnDegisKaynakChanging(value);
					this.SendPropertyChanging();
					this._DegisKaynak = value;
					this.SendPropertyChanged("DegisKaynak");
					this.OnDegisKaynakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DegisSurum", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string DegisSurum
		{
			get
			{
				return this._DegisSurum;
			}
			set
			{
				if ((this._DegisSurum != value))
				{
					this.OnDegisSurumChanging(value);
					this.SendPropertyChanging();
					this._DegisSurum = value;
					this.SendPropertyChanged("DegisSurum");
					this.OnDegisSurumChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="usr.UserPerm")]
	public partial class UserPerm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private string _PermName;
		
		private bool _Reading;
		
		private bool _Writing;
		
		private bool _Updating;
		
		private bool _Deleting;
		
		private System.Nullable<System.DateTime> _RecordDate;
		
		private string _RecordUser;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private string _ModifiedUser;
		
		private EntityRef<Perm> _Perm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPermNameChanging(string value);
    partial void OnPermNameChanged();
    partial void OnReadingChanging(bool value);
    partial void OnReadingChanged();
    partial void OnWritingChanging(bool value);
    partial void OnWritingChanged();
    partial void OnUpdatingChanging(bool value);
    partial void OnUpdatingChanged();
    partial void OnDeletingChanging(bool value);
    partial void OnDeletingChanged();
    partial void OnRecordDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRecordDateChanged();
    partial void OnRecordUserChanging(string value);
    partial void OnRecordUserChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedUserChanging(string value);
    partial void OnModifiedUserChanged();
    #endregion
		
		public UserPerm()
		{
			this._Perm = default(EntityRef<Perm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermName", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PermName
		{
			get
			{
				return this._PermName;
			}
			set
			{
				if ((this._PermName != value))
				{
					if (this._Perm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermNameChanging(value);
					this.SendPropertyChanging();
					this._PermName = value;
					this.SendPropertyChanged("PermName");
					this.OnPermNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reading", DbType="Bit NOT NULL")]
		public bool Reading
		{
			get
			{
				return this._Reading;
			}
			set
			{
				if ((this._Reading != value))
				{
					this.OnReadingChanging(value);
					this.SendPropertyChanging();
					this._Reading = value;
					this.SendPropertyChanged("Reading");
					this.OnReadingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Writing", DbType="Bit NOT NULL")]
		public bool Writing
		{
			get
			{
				return this._Writing;
			}
			set
			{
				if ((this._Writing != value))
				{
					this.OnWritingChanging(value);
					this.SendPropertyChanging();
					this._Writing = value;
					this.SendPropertyChanged("Writing");
					this.OnWritingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updating", DbType="Bit NOT NULL")]
		public bool Updating
		{
			get
			{
				return this._Updating;
			}
			set
			{
				if ((this._Updating != value))
				{
					this.OnUpdatingChanging(value);
					this.SendPropertyChanging();
					this._Updating = value;
					this.SendPropertyChanged("Updating");
					this.OnUpdatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleting", DbType="Bit NOT NULL")]
		public bool Deleting
		{
			get
			{
				return this._Deleting;
			}
			set
			{
				if ((this._Deleting != value))
				{
					this.OnDeletingChanging(value);
					this.SendPropertyChanging();
					this._Deleting = value;
					this.SendPropertyChanged("Deleting");
					this.OnDeletingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> RecordDate
		{
			get
			{
				return this._RecordDate;
			}
			set
			{
				if ((this._RecordDate != value))
				{
					this.OnRecordDateChanging(value);
					this.SendPropertyChanging();
					this._RecordDate = value;
					this.SendPropertyChanged("RecordDate");
					this.OnRecordDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordUser", DbType="VarChar(20)")]
		public string RecordUser
		{
			get
			{
				return this._RecordUser;
			}
			set
			{
				if ((this._RecordUser != value))
				{
					this.OnRecordUserChanging(value);
					this.SendPropertyChanging();
					this._RecordUser = value;
					this.SendPropertyChanged("RecordUser");
					this.OnRecordUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedUser", DbType="VarChar(20)")]
		public string ModifiedUser
		{
			get
			{
				return this._ModifiedUser;
			}
			set
			{
				if ((this._ModifiedUser != value))
				{
					this.OnModifiedUserChanging(value);
					this.SendPropertyChanging();
					this._ModifiedUser = value;
					this.SendPropertyChanged("ModifiedUser");
					this.OnModifiedUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Perm_UserPerm", Storage="_Perm", ThisKey="PermName", OtherKey="PermName", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Perm Perm
		{
			get
			{
				return this._Perm.Entity;
			}
			set
			{
				Perm previousValue = this._Perm.Entity;
				if (((previousValue != value) 
							|| (this._Perm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Perm.Entity = null;
						previousValue.UserPerms.Remove(this);
					}
					this._Perm.Entity = value;
					if ((value != null))
					{
						value.UserPerms.Add(this);
						this._PermName = value.PermName;
					}
					else
					{
						this._PermName = default(string);
					}
					this.SendPropertyChanged("Perm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="usr.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _RoleName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public Role()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="usr.RolePerm")]
	public partial class RolePerm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _RoleName;
		
		private string _PermName;
		
		private bool _Reading;
		
		private bool _Writing;
		
		private bool _Updating;
		
		private bool _Deleting;
		
		private System.Nullable<System.DateTime> _RecordDate;
		
		private string _RecordUser;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private string _ModifiedUser;
		
		private EntityRef<Perm> _Perm;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnPermNameChanging(string value);
    partial void OnPermNameChanged();
    partial void OnReadingChanging(bool value);
    partial void OnReadingChanged();
    partial void OnWritingChanging(bool value);
    partial void OnWritingChanged();
    partial void OnUpdatingChanging(bool value);
    partial void OnUpdatingChanged();
    partial void OnDeletingChanging(bool value);
    partial void OnDeletingChanged();
    partial void OnRecordDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRecordDateChanged();
    partial void OnRecordUserChanging(string value);
    partial void OnRecordUserChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    partial void OnModifiedUserChanging(string value);
    partial void OnModifiedUserChanged();
    #endregion
		
		public RolePerm()
		{
			this._Perm = default(EntityRef<Perm>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermName", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PermName
		{
			get
			{
				return this._PermName;
			}
			set
			{
				if ((this._PermName != value))
				{
					if (this._Perm.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermNameChanging(value);
					this.SendPropertyChanging();
					this._PermName = value;
					this.SendPropertyChanged("PermName");
					this.OnPermNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reading", DbType="Bit NOT NULL")]
		public bool Reading
		{
			get
			{
				return this._Reading;
			}
			set
			{
				if ((this._Reading != value))
				{
					this.OnReadingChanging(value);
					this.SendPropertyChanging();
					this._Reading = value;
					this.SendPropertyChanged("Reading");
					this.OnReadingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Writing", DbType="Bit NOT NULL")]
		public bool Writing
		{
			get
			{
				return this._Writing;
			}
			set
			{
				if ((this._Writing != value))
				{
					this.OnWritingChanging(value);
					this.SendPropertyChanging();
					this._Writing = value;
					this.SendPropertyChanged("Writing");
					this.OnWritingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updating", DbType="Bit NOT NULL")]
		public bool Updating
		{
			get
			{
				return this._Updating;
			}
			set
			{
				if ((this._Updating != value))
				{
					this.OnUpdatingChanging(value);
					this.SendPropertyChanging();
					this._Updating = value;
					this.SendPropertyChanged("Updating");
					this.OnUpdatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleting", DbType="Bit NOT NULL")]
		public bool Deleting
		{
			get
			{
				return this._Deleting;
			}
			set
			{
				if ((this._Deleting != value))
				{
					this.OnDeletingChanging(value);
					this.SendPropertyChanging();
					this._Deleting = value;
					this.SendPropertyChanged("Deleting");
					this.OnDeletingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> RecordDate
		{
			get
			{
				return this._RecordDate;
			}
			set
			{
				if ((this._RecordDate != value))
				{
					this.OnRecordDateChanging(value);
					this.SendPropertyChanging();
					this._RecordDate = value;
					this.SendPropertyChanged("RecordDate");
					this.OnRecordDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordUser", DbType="VarChar(20)")]
		public string RecordUser
		{
			get
			{
				return this._RecordUser;
			}
			set
			{
				if ((this._RecordUser != value))
				{
					this.OnRecordUserChanging(value);
					this.SendPropertyChanging();
					this._RecordUser = value;
					this.SendPropertyChanged("RecordUser");
					this.OnRecordUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedUser", DbType="VarChar(20)")]
		public string ModifiedUser
		{
			get
			{
				return this._ModifiedUser;
			}
			set
			{
				if ((this._ModifiedUser != value))
				{
					this.OnModifiedUserChanging(value);
					this.SendPropertyChanging();
					this._ModifiedUser = value;
					this.SendPropertyChanged("ModifiedUser");
					this.OnModifiedUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Perm_RolePerm", Storage="_Perm", ThisKey="PermName", OtherKey="PermName", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Perm Perm
		{
			get
			{
				return this._Perm.Entity;
			}
			set
			{
				Perm previousValue = this._Perm.Entity;
				if (((previousValue != value) 
							|| (this._Perm.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Perm.Entity = null;
						previousValue.RolePerms.Remove(this);
					}
					this._Perm.Entity = value;
					if ((value != null))
					{
						value.RolePerms.Add(this);
						this._PermName = value.PermName;
					}
					else
					{
						this._PermName = default(string);
					}
					this.SendPropertyChanged("Perm");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="usr.[Perm]")]
	public partial class Perm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PermName;
		
		private bool _Active;
		
		private short _Type;
		
		private short _AppType;
		
		private string _Group;
		
		private System.Nullable<System.DateTime> _RecordDate;
		
		private EntitySet<UserPerm> _UserPerms;
		
		private EntitySet<RolePerm> _RolePerms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPermNameChanging(string value);
    partial void OnPermNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnTypeChanging(short value);
    partial void OnTypeChanged();
    partial void OnAppTypeChanging(short value);
    partial void OnAppTypeChanged();
    partial void OnGroupChanging(string value);
    partial void OnGroupChanged();
    partial void OnRecordDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRecordDateChanged();
    #endregion
		
		public Perm()
		{
			this._UserPerms = new EntitySet<UserPerm>(new Action<UserPerm>(this.attach_UserPerms), new Action<UserPerm>(this.detach_UserPerms));
			this._RolePerms = new EntitySet<RolePerm>(new Action<RolePerm>(this.attach_RolePerms), new Action<RolePerm>(this.detach_RolePerms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermName", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PermName
		{
			get
			{
				return this._PermName;
			}
			set
			{
				if ((this._PermName != value))
				{
					this.OnPermNameChanging(value);
					this.SendPropertyChanging();
					this._PermName = value;
					this.SendPropertyChanged("PermName");
					this.OnPermNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="SmallInt NOT NULL")]
		public short Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppType", DbType="SmallInt NOT NULL")]
		public short AppType
		{
			get
			{
				return this._AppType;
			}
			set
			{
				if ((this._AppType != value))
				{
					this.OnAppTypeChanging(value);
					this.SendPropertyChanging();
					this._AppType = value;
					this.SendPropertyChanged("AppType");
					this.OnAppTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Group]", Storage="_Group", DbType="VarChar(50)")]
		public string Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> RecordDate
		{
			get
			{
				return this._RecordDate;
			}
			set
			{
				if ((this._RecordDate != value))
				{
					this.OnRecordDateChanging(value);
					this.SendPropertyChanging();
					this._RecordDate = value;
					this.SendPropertyChanged("RecordDate");
					this.OnRecordDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Perm_UserPerm", Storage="_UserPerms", ThisKey="PermName", OtherKey="PermName")]
		public EntitySet<UserPerm> UserPerms
		{
			get
			{
				return this._UserPerms;
			}
			set
			{
				this._UserPerms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Perm_RolePerm", Storage="_RolePerms", ThisKey="PermName", OtherKey="PermName")]
		public EntitySet<RolePerm> RolePerms
		{
			get
			{
				return this._RolePerms;
			}
			set
			{
				this._RolePerms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPerms(UserPerm entity)
		{
			this.SendPropertyChanging();
			entity.Perm = this;
		}
		
		private void detach_UserPerms(UserPerm entity)
		{
			this.SendPropertyChanging();
			entity.Perm = null;
		}
		
		private void attach_RolePerms(RolePerm entity)
		{
			this.SendPropertyChanging();
			entity.Perm = this;
		}
		
		private void detach_RolePerms(RolePerm entity)
		{
			this.SendPropertyChanging();
			entity.Perm = null;
		}
	}
}
#pragma warning restore 1591
